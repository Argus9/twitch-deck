<html>
<head>
    <title>TwitchDeck</title>
    <%= render 'partials/google_analytics_init' %>
</head>
<body class="noscroll">
<div id="main-container">
    <div id="stream-switch-tabs">
        <div id="switch-label">Switch to...</div>
        <div id="streamer-buttons">
            <% @streamers.each_with_index do |streamer, position| %>
                <span class="stream-button button<%= '-inactive' if streamer['status'] === 'offline' %><%= '-active' if position === 0 && streamer['status'] === 'online' %>"><%= streamer['name'] %></span>
            <% end %>
        </div>
        <%= render 'partials/menu' %>
    </div>
    <div id="main-stream">
        <iframe id="main-stream-player" class="stream" src="http://player.twitch.tv/?channel=<%= @streamers.first['name'] %>&auto_play=true&muted=false"></iframe>
        <iframe id="chat" scrolling="no" src="https://twitch.tv/<%= @streamers.first['name'] %>/chat?popout="></iframe>
    </div>
    <div id="stream-queue">
        <% if @streamers.count > 1 %>
            <% @streamers[1..-1].each do |streamer| %>
                <iframe class="on-deck-stream" src="http://player.twitch.tv/?channel=<%= streamer['name'] %>&auto_play=true&muted=true"></iframe>
            <% end %>
            </div>
        <% end %>
        </div>

<script>
    $( document ).ready( function () {
        var streamers = JSON.parse( '<%= @streamers.to_json.html_safe %>' );

        /*
         * Update streams on the page, based on their online status.
         */
        var get_stream_status = function () {
            /*
             * Callback that follows a successful AJAX call to Twitch's API.
             */
            var callback_function = function ( callback_data ) {
                $.each( streamers, function ( _, streamer ) {
                    streamer[ 'status' ] = 'offline';
                    var matching_streamer = $.grep( callback_data[ 'streams' ], function ( streamer_under_search ) {
                        return streamer_under_search[ 'channel' ][ 'name' ] === streamer[ 'name' ];
                    } );
                    if ( matching_streamer.length > 0 ) {
                        streamer[ 'status' ] = 'online';
                    }
                } );

                // Re-organize streamer order based on online status, then by priority.
                streamers.sort( function ( left_obj, right_obj ) {
                    if ( left_obj[ 'status' ] === 'online' && right_obj[ 'status' ] === 'offline' ) {
                        return - 1;
                    } else if ( left_obj[ 'status' ] === 'offline' && right_obj[ 'status' ] === 'online' ) {
                        return 1;
                    } else {
                        return left_obj[ 'priority' ] < right_obj[ 'priority' ] ? - 1 : 1;
                    }
                } );

                reticulate_player_splines();
            };

            // Update all streams' status.
            var streamer_names = $.map( streamers, function ( streamer, _ ) {
                return streamer[ 'name' ];
            } ).join( ',' );

            $.ajax( {
                url: 'https://api.twitch.tv/kraken/streams?channel=' + streamer_names,
                async: true
            } ).success( function ( data ) {
                callback_function( data )
            } );
        };

        /*
         * Returns a Twitch player URL, filling in the given values of the streamer name and muted flag.
         */
        var get_player_url = function ( name, muted ) {
            return 'http://player.twitch.tv/?channel=' + name + '&auto_play=true&muted=' + muted;
        };

        var reticulate_player_splines = function () {
            var streams_changed = false;
            // If main streamer is still online, ONLY re-organize on-deck streams.
            if ( $( 'iframe#main-stream-player' )[ 0 ].src !== get_player_url( streamers[ 0 ][ 'name' ], false ) ) {
                console.log( "Main streamer went offline. Loading a new main streamer." );
                document.getElementById( 'main-stream-player' ).src = get_player_url( streamers[ 0 ][ 'name' ], false );
                document.getElementById( 'chat' ).src = 'https://twitch.tv/' + streamers[ 0 ][ 'name' ] + '/chat?popout=';
                streams_changed = true;
            }

            // Re-organize on-deck streams if they have changed.
            var iframes = $( '.on-deck-stream' );
            $.each( streamers.slice( 1 ), function ( position, streamer ) {
                if ( iframes[ position ].src !== get_player_url( streamer[ 'name' ], true ) ) {
                    if ( ! streams_changed ) {
                        console.log( "Re-ordering on-deck streamers." );
                    }
                    iframes[ position ].src = get_player_url( streamer[ 'name' ], true );
                    streams_changed = true;
                }
            } );

            // Finally, reset the list of "switch to" buttons to match the current stream order and status.
            if ( streams_changed ) {
                $.each( $( '.stream-button' ), function ( position, button ) {
                    $( button ).text( streamers[ position ][ 'name' ] );
                    if ( streamers[ position ][ 'status' ] === 'offline' ) {
                        $( button ).addClass( 'button-inactive' );
                        $( button ).removeClass( 'button' );
                        $( button ).removeClass( 'button-active' );
                    } else {
                        if ( position === 0 && streamers[ position ][ 'status' ] === 'online' ) {
                            $( button ).removeClass( 'button-inactive' );
                            $( button ).removeClass( 'button' );
                            $( button ).addClass( 'button-active' )
                        } else {
                            $( button ).removeClass( 'button-inactive' );
                            $( button ).removeClass( 'button-active' );
                            $( button ).addClass( 'button' );
                        }
                    }
                } );
            }
        }

        /*
         * Called when a "switch to" button is clicked, which forces the streamer into the main player while shifting
         * all streamers on-deck down by one.
         */
        $( '.stream-button' ).click( function () {
            var streamer_name = $( this ).text();

            // Find the streamer whose name matches the one on the button.
            var matching_streamer;
            $.each( streamers, function ( position, streamer ) {
                if ( streamer[ 'name' ] === streamer_name ) {
                    matching_streamer = { position: position, streamer: streamer };
                    return false;
                }
            } );

            streamers.splice( matching_streamer[ 'position' ], 1 );
            streamers.unshift( matching_streamer[ 'streamer' ] );

            // Re-do all priorities for each streamer.
            $.each( streamers, function ( position, streamer ) {
                streamer[ 'priority' ] = position;
            } );
            reticulate_player_splines();
        } );

        $( '#theater_mode_toggle' ).click( function () {
            if ( $( '#theater_mode_toggle' ).hasClass( 'theater_mode_active' ) ) {
                $( '#stream-queue' ).removeClass( 'theater' );
                $( '#main-stream-player' ).removeClass( 'theater' );
                $( '#chat' ).removeClass( 'theater' );
                $( '#theater_mode_toggle' ).removeClass( 'theater_mode_active' );
            } else {
                $( '#stream-queue' ).addClass( 'theater' );
                $( '#main-stream-player' ).addClass( 'theater' );
                $( '#chat' ).addClass( 'theater' );
                $( '#theater_mode_toggle' ).addClass( 'theater_mode_active' );
            }
        } );

        $( '#hide_chat_toggle' ).click( function () {
            if ( $( '#hide_chat_toggle' ).hasClass( 'hide_chat_mode_active' ) ) {
                $( '#chat' ).removeClass( 'hide_chat' );
                $( '#main-stream-player' ).removeClass( 'hide_chat' );
                $( '#hide_chat_toggle' ).removeClass( 'hide_chat_mode_active' );
            } else {
                $( '#chat' ).addClass( 'hide_chat' );
                $( '#main-stream-player' ).addClass( 'hide_chat' );
                $( '#hide_chat_toggle' ).addClass( 'hide_chat_mode_active' );
            }
        } );

        // Set up an interval to update stream layouts on the page every 15 seconds.
        setInterval( function () {
            // Check if main stream is online
            get_stream_status();
        }, 15000 );

        // Sets up a heartbeat to report active users beyond the normal 5 minute timeout.
        setInterval(function(){
            ga('send', {
                hitType: 'event',
                eventCategory: 'Videos',
                eventAction: 'play',
                eventLabel: 'Heartbeat'
            });
        }, 270000);
    } );
</script>
</body>
</html>